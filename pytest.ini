[pytest]
markers =
    run_this: testing marker for run this test, useful for development
    acceptance: marker for acceptance tests
    tier0: marker for tier0 tests
    tier1: marker for tier1 tests
    tier2: marker for tier2 tests
    tier3: marker for tier3 tests
    tier4: marker for tier4 tests
    tier4a: marker for tier4 tests suite a
    tier4b: marker for tier4 tests suite b
    tier4c: marker for tier4 tests suite c
    tier_after_upgrade: marker for test which will be executed after upgrade
    manage: manage team marker
    ecosystem: ecosystem team marker
    e2e: e2e team marker
    ocp: ocp related tests
    rook: rook related tests
    ui: UI related tests
    csi: CSI related tests
    monitoring: monitoring related tests
    workloads: workloads related tests
    flowtests: flowbased related tests
    system_test: Tests related to system level scenarios where the test scenarios exercise multiple features together
    performance: performance related tests
    performance_a: performance related tests - first group
    performance_b: performance related tests - second group
    performance_c: performance related tests - third group
    performance_extended: non regression performance tests
    scale: scale related tests
    scale_long_run: scale tests which has execution time in days
    scale_changed_layout: scale capacity/node tests without teardown
    deployment: deployment related tests
    acm_import: acm_import related tests
    ocs_upgrade: marker for OCS upgrade test
    pre_ocs_upgrade: marker for pre OCS upgrade tests
    post_ocs_upgrade: marker for post OCS upgrade tests
    ocp_upgrade: marker for OCP upgrade test
    pre_ocp_upgrade: marker for pre OCP upgrade tests
    post_ocp_upgrade: marker for post OCP upgrade tests
    pre_upgrade: upgrade related tests triggered before upgrade
    post_upgrade: upgrade related tests triggered after upgrade
    post_deployment: tests executed right after deployment
    polarion_id: ID of test case used for reporting to Polarion
    libtest: marker for library tests which requires a running cluster
    gather_metrics_on_fail: collect metrics specified in parameter when error
    first: for tests to be executed with priority, from pytest-ordering plugin
    skipif_ocs_version: to skip tests based on ocs version applicable
    skipif_upgraded_from: to skip tests if OCS cluster is upgraded from a particular version
    skipif_no_kms: to skip tests if OCS cluster has not configured KMS integration
    last: for tests to be executed with priority, from pytest-ordering plugin. test case executes at last
    second_to_last: for tests to be executed with priority, from pytest-ordering plugin. test case executes at second to last
    post_ocp_upgrade: marker for post ocp upgrade tests
    aqua_squad: marker for aqua squad
    brown_squad: marker for brown squad
    green_squad: marker for green squad
    blue_squad: marker for blue squad
    red_squad: marker for red squad
    purple_squad: marker for purple squad
    magenta_squad: marker for magenta squad
    grey_squad: marker for grey squad
    orange_squad: marker for orange squad
    black_squad: marker for black squad
    yellow_squad: marker for yellow squad
    turquoise_squad: marker for turquoise squad
    ignore_owner: marker to ignore test during squad decorator check in pytest collection
    mcg: marker for MCG related tests
    rgw: marker for RGW related tests
    skipif_ocp_version: marker we use for skipping tests on particular OCP version
    skipif_ui_not_support: skip test if it's not supported for UI testing
    skipif_lvm_not_installed: skip test if the lvm is not installed
    runs_on_provider: skip test
    ignore_leftovers: marker for the ignoring leftovers for specific test
    ignore_leftover_label: marker for ignoring lefotover of resources having specific label
    ignore_resource_not_found_error_label: ignore resource_not_found error such as when deleting a resource that was already deleted
    stretchcluster_required: maker to select stretch ceph cluster related tests

# Clusterctx used without hyphen, to keep the original format if it's None
log_format = %(asctime)s - %(threadName)s - %(name)s - %(levelname)s %(clusterctx)s - %(message)s
# Don't set log_cli_level to DEBUG because we get memory issues on Jenkins
log_cli=true
log_cli_level = INFO
log_level = DEBUG
addopts = --ignore=ocs_ci --show-capture=no --capture=no --show-progress
testpaths = tests
