import logging
import pytest

from ocs_ci.framework.pytest_customization.marks import (
    system_test,
    magenta_squad,
    ignore_leftovers,
)
from ocs_ci.framework.testlib import E2ETest
from ocs_ci.helpers.keyrotation_helper import (
    validate_key_rotation_schedules,
    verify_new_key_after_rotation,
    OSDKeyRotation,
    KeyRotationManager,
)
from ocs_ci.helpers.osd_resize import basic_resize_osd, get_storage_size
from ocs_ci.helpers.sanity_helpers import Sanity
from ocs_ci.ocs import warp

log = logging.getLogger(__name__)


@magenta_squad
@system_test
@ignore_leftovers
class TestKeyRotationWithClusterFull(E2ETest):
    @pytest.fixture(autouse=True)
    def init_sanity(self):
        """
        Initialize Sanity instance

        """
        self.sanity_helpers = Sanity()
        self.sanity_helpers.health_check()

    @pytest.fixture()
    def warps3(self, request):
        warps3 = warp.Warp()
        warps3.create_resource_warp(replicas=4, multi_client=True)

        def teardown():
            warps3.cleanup(multi_client=True)

        request.addfinalizer(teardown)
        return warps3

    def teardown(self):
        OSDKeyRotation().set_keyrotation_schedule("@weekly")

    def test_cluster_wide_encryption_key_rotation(
        self,
        bucket_factory_session,
        mcg_obj_session,
        run_fio_till_cluster_full,
        noobaa_db_backup_and_recovery_locally,
        validate_noobaa_rebuild_system,
        validate_noobaa_db_backup_recovery_locally_system,
        warps3,
        setup_mcg_bg_features,
        multi_pvc_pod_lifecycle_factory,
        multi_pvc_clone_factory,
        multi_snapshot_factory,
        snapshot_restore_factory,
        project_factory,
    ):
        """
        1. Run entry criteria on the cluster initially to have required load on the cluster to perform system test.
        2. Function OSDKeyrotation().set_keyrotation_schedule is to set cluster wide keyrotation period to every 5 mins
        3. Using verify_new_key_after_rotation function to Capture the keys details and verify new keys
         after the scheduled time.
        4. Fill the cluster till the full ratio limits (85%) by running FIO from multiple pods and verify key rotation.
        5. Once the cluster reaches read-only state, resize the OSD using basic_resize_osd and verify key rotation.
        6. Run validate_noobaa_rebuild_system function to verify key rotation still works as it is afetr nobba rebuild.
        7. Run validate_noobaa_db_backup_recovery_locally_system and verify key rotation.

        """

        # MCG entry criteria
        setup_mcg_bg_features(
            num_of_buckets=10,
            object_amount=10,
            is_disruptive=True,
            skip_any_features=["nsfs", "rgw kafka", "caching"],
            skip_any_provider=["azure"],
        )
        # Cephfs entry criteria
        pvc_obj, pod_obj = multi_pvc_pod_lifecycle_factory(
            measure=False, delete=False, num_of_pvcs=30
        )
        # Commenting below code due to ocs-ci issue 11605
        # multi_pvc_clone_factory(pvc_obj=pvc_obj[:11])
        # snap_list = multi_snapshot_factory(pvc_obj=pvc_obj[:11])
        # for snapshot in snap_list:
        #     snapshot_restore_factory(snapshot_obj=snapshot)

        time_interval_to_rotate_key_in_minutes = str(5)
        tries = 10
        delays = int(time_interval_to_rotate_key_in_minutes) * 60 / tries
        schedule = f"*/{time_interval_to_rotate_key_in_minutes} * * * *"
        log.info("Setting the key rotation time by editing storage cluster")
        key_rotation = KeyRotationManager()
        if not key_rotation.is_keyrotation_enabled():
            key_rotation.enable_keyrotation()
        OSDKeyRotation().set_keyrotation_schedule(schedule)
        log.info("Verifying the key rotation time set properly or not")
        self.verify_key_rotation_time(schedule=schedule)
        log.info("Verifying the new key generated by comparing it with older key")
        verify_new_key_after_rotation(tries, delays)

        run_fio_till_cluster_full()
        log.info(
            "Verifying the key rotation time is still unchanged after 85% cluster full"
        )
        self.verify_key_rotation_time(schedule=schedule)
        log.info(
            "After cluster full 85%, verifying the new key generated by comparing it with older key"
        )
        verify_new_key_after_rotation(tries, delays)

        log.info("Performing OSD resize")
        basic_resize_osd(get_storage_size())

        log.info("After OSD resize, checking the key rotation time is unchanged")
        self.verify_key_rotation_time(schedule=schedule)
        log.info(
            "After OSD resize, verifying the new key generated by comparing it with older key"
        )
        verify_new_key_after_rotation(tries, delays)
        log.info("Triggering noobaa rebuild test")

        validate_noobaa_rebuild_system(bucket_factory_session, mcg_obj_session)
        log.info("After noobaa rebuild, checking the key rotation time is unchanged")
        self.verify_key_rotation_time(schedule=schedule)
        log.info(
            "After noobaa rebuild, verifying the new key generated by comparing it with older key"
        )
        verify_new_key_after_rotation(tries, delays)
        log.info("Starting noobaa rebuild cleanup activity")

        log.info("Triggering noobaa db backup and recovery locally")

        validate_noobaa_db_backup_recovery_locally_system(
            bucket_factory_session,
            noobaa_db_backup_and_recovery_locally,
            warps3,
            mcg_obj_session,
        )

        log.info(
            "After noobaa db backup and recovery, checking the key rotation time is unchanged"
        )
        self.verify_key_rotation_time(schedule=schedule)
        log.info(
            "After noobaa db backup and  recovery, verifying the new key generated by comparing it with older key"
        )
        verify_new_key_after_rotation(tries, delays)

    def verify_key_rotation_time(self, schedule):
        """
        This function handles the exceptions raised by validate_key_rotation_schedules

        """

        try:
            validate_key_rotation_schedules(schedule=schedule)
        except ValueError as e:
            log.error(f"Validation failed: {e}")
        else:
            log.info("All key rotation schedules validated successfully.")
