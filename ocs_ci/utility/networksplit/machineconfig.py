# -*- coding: utf8 -*-
"""This module generates MachineConfig to deploy network-split systemd units,
which implements the network split functionality.

References:

 * https://github.com/openshift/machine-config-operator/blob/master/docs/MachineConfigDaemon.md
 * https://coreos.github.io/ignition/configuration-v3_1/

.. moduleauthor:: Martin Bukatoviƒç
"""


import base64
import os
import os.path
import textwrap

import yaml


HERE = os.path.abspath(os.path.dirname(__file__))


MACHINECONFIG_SKELL = textwrap.dedent(
    """
    apiVersion: machineconfiguration.openshift.io/v1
    kind: MachineConfig
    metadata:
      name: TODO
      labels:
        machineconfiguration.openshift.io/role: TODO
    spec:
      config:
        ignition:
          version: 3.1.0
        storage:
          files: []
        systemd:
          units: []
"""
)


FILE_SKEL = textwrap.dedent(
    """
    path: TODO
    contents:
      source: TODO
    mode: 0444
    user:
      name: root
    group:
      name: root
"""
)


UNIT_SKEL = textwrap.dedent(
    """
    name: TODO
    enabled: true
    contents: TODO
"""
)


def create_file_dict(basename, content):
    """
    Create Ignition config spec for given file basename and content, to be used
    in a MachineConfig spec. Files will be always placed in ``/etc`` directory
    (MCO can only change files in ``/etc`` and ``/var`` directories).

    Args:
        basename (str): basename of the file
        content (str): content of the file

    Returns:
        dict: Ignition storage file config spec

    """
    if basename is None or len(basename) == 0:
        raise ValueError("basename should not be empty")
    file_dict = yaml.safe_load(FILE_SKEL)
    # MCO can deploy files to /etc and /var directories only
    file_dict["path"] = os.path.join("/etc", basename)
    # Ignition requires content of storage.file entry to be provided via an
    # URL and accepts rfc2397 "data" URL scheme.
    source_prefix = "data:text/plain;charset=utf-8;base64,"
    content_base64 = base64.b64encode(content.encode()).decode()
    file_dict["contents"]["source"] = source_prefix + content_base64
    return file_dict


def create_unit_dict(name, content):
    """
    Create Ignition config spec for given systemd unit name and content, to be
    used in a MachineConfig spec.

    Args:
        name (str): name of systemd unit
        content (str): content of the file

    Returns:
        dict: Ignition systemd unit config spec
    """
    if name is None or len(name) == 0:
        raise ValueError("name of the unit should not be empty")
    unit_dict = yaml.safe_load(UNIT_SKEL)
    unit_dict["name"] = name
    unit_dict["contents"] = content
    return unit_dict


def create_mc_dict(role, zone_env):
    """
    Create MachineConfig dict with network-split systemd units and scripts.

    Args:
        mcp (string): name of MachineConfig role (and also MachineConfigPool)
            where the MachineConfig generated by this function should
            be deployed. Usually "master" or "worker".
        zone_env (string): content of network-split.env with zone configuration

    Returns:
        dict: MachineConfig dict
    """
    mcd = yaml.safe_load(MACHINECONFIG_SKELL)
    mcd["metadata"]["name"] = "99-" + role + "-network-split"
    mcd["metadata"]["labels"]["machineconfiguration.openshift.io/role"] = role

    # include firewall script file
    with open(os.path.join(HERE, "network-split.sh"), "r") as script_file:
        script_dict = create_file_dict("network-split.sh", script_file.read())
        # the script needs to be executable
        script_dict["mode"] = 0o544
        mcd["spec"]["config"]["storage"]["files"].append(script_dict)

    # add env file with zone configuration
    env_dict = create_file_dict("network-split.env", zone_env)
    mcd["spec"]["config"]["storage"]["files"].append(env_dict)

    # and include all systemd units from systemd directory
    systemd_dir = os.path.join(HERE, "systemd")
    for unit_filename in os.listdir(systemd_dir):
        with open(os.path.join(systemd_dir, unit_filename), "r") as unit_file:
            unit_dict = create_unit_dict(unit_filename, unit_file.read())
            mcd["spec"]["config"]["systemd"]["units"].append(unit_dict)

    return mcd
