"""
Utility functions related to OCP deployment done via Flexy
"""

import json
import logging
import os

from ocs_ci.framework import config

logger = logging.getLogger(__name__)


def load_cluster_info():
    """
    Parse cluster_info.json file generated by Flexy and load relevant
    configuratin.
    """
    cluster_info_file = os.path.join(
        config.ENV_DATA["cluster_path"], "cluster_info.json"
    )
    if os.path.exists(cluster_info_file):
        logging.info(f"File {cluster_info_file} exists, loading relevant info.")
        with open(cluster_info_file) as f:
            cluster_info = json.load(f)

        # is this a disconnected cluster?
        if (
            cluster_info.get("MIRROR_REGISTRY")
            and cluster_info.get("MIRROR_REGISTRY_LOGIN_USER")
            and cluster_info.get("MIRROR_REGISTRY_LOGIN_PASSWORD")
        ):
            logging.info("Loading configuration for disconnected cluster")
            config.DEPLOYMENT["disconnected"] = True
            config.DEPLOYMENT["mirror_registry"] = cluster_info.get("MIRROR_REGISTRY")
            config.DEPLOYMENT["mirror_registry_user"] = cluster_info.get(
                "MIRROR_REGISTRY_LOGIN_USER"
            )
            config.DEPLOYMENT["mirror_registry_password"] = cluster_info.get(
                "MIRROR_REGISTRY_LOGIN_PASSWORD"
            )
            config.DEPLOYMENT["int_svc_instance"] = cluster_info.get(
                "INT_SVC_INSTANCE_PUBLIC_IP"
            )
