"""
Utility functions related to OCP deployment done via Flexy
"""

import json
import logging
import os
import yaml

from ocs_ci.framework import config
from ocs_ci.ocs import constants
from ocs_ci.utility.connection import Connection
from ocs_ci.utility.version import get_semantic_version, VERSION_4_11

logger = logging.getLogger(__name__)


def load_cluster_info(cluster_config=None):
    """
    Parse cluster_info.json and cluster_info.yaml files generated by Flexy and
    load relevant configuration.

    Args:
        cluster_config (MultiClusterConfig): config object of a specific cluster in case of multiclsuter
            scenario, if its single cluster we will go ahead with the config

    """
    if not cluster_config:
        cluster_config = config
    cluster_info_file = os.path.join(
        cluster_config.ENV_DATA["cluster_path"], "cluster_info.json"
    )
    if os.path.exists(cluster_info_file):
        logger.info(f"File {cluster_info_file} exists, loading relevant info.")
        with open(cluster_info_file) as f:
            cluster_info = json.load(f)

        # is this a disconnected cluster?
        if (
            cluster_info.get("MIRROR_REGISTRY")
            and cluster_info.get("MIRROR_REGISTRY_LOGIN_USER")
            and cluster_info.get("MIRROR_REGISTRY_LOGIN_PASSWORD")
        ):
            logger.info("Loading configuration for disconnected cluster")
            cluster_config.DEPLOYMENT["disconnected"] = True
            cluster_config.DEPLOYMENT["mirror_registry"] = cluster_info.get(
                "MIRROR_REGISTRY"
            )
            cluster_config.DEPLOYMENT["mirror_registry_user"] = cluster_info.get(
                "MIRROR_REGISTRY_LOGIN_USER"
            )
            cluster_config.DEPLOYMENT["mirror_registry_password"] = cluster_info.get(
                "MIRROR_REGISTRY_LOGIN_PASSWORD"
            )
            cluster_config.DEPLOYMENT["int_svc_instance"] = cluster_info.get(
                "INT_SVC_INSTANCE_PUBLIC_IP"
            )

    cluster_info_file = os.path.join(
        cluster_config.ENV_DATA["cluster_path"], "cluster_info.yaml"
    )
    if os.path.exists(cluster_info_file):
        logger.info(f"File {cluster_info_file} exists, loading relevant info.")
        with open(cluster_info_file) as f:
            cluster_info = yaml.safe_load(f)

        # configure proxy for client access, if required
        if cluster_info.get("INSTALLER", {}).get("CLIENT_PROXY"):
            client_proxy = cluster_info.get("INSTALLER", {}).get("CLIENT_PROXY")
            logger.info(f"Configuring client proxy: {client_proxy}")
            cluster_config.ENV_DATA["client_http_proxy"] = cluster_config.ENV_DATA.get(
                "client_http_proxy", client_proxy
            )
            os.environ["http_proxy"] = cluster_config.ENV_DATA["client_http_proxy"]
            os.environ["https_proxy"] = cluster_config.ENV_DATA["client_http_proxy"]


def configure_allowed_domains_in_proxy():
    """
    Configure squid proxy server - add domains which needs to be accessible
    from disconnected cluster for test execution.

    """
    # configure proxy on INT_SVC_INSTANCE - allow access to required sites
    # import get_ocp_version here to avoid circular import
    from ocs_ci.utility.utils import get_ocp_version

    if get_semantic_version(get_ocp_version(), True) < VERSION_4_11:
        int_svc_user = constants.EC2_USER
    else:
        int_svc_user = "core"
    private_key = os.path.expanduser(config.DEPLOYMENT["ssh_key_private"])
    ssh_int_svc = Connection(
        config.DEPLOYMENT.get("int_svc_instance"), int_svc_user, private_key
    )
    # as we are inserting the two lines before first line one by one,
    # we have to launch the sed commands in reverse order
    cmd = "sudo sed -i '1i http_access allow ocs_whitelist' /srv/squid/etc/squid.conf"
    logger.info(ssh_int_svc.exec_cmd(cmd=cmd))
    cmd = (
        """sudo sed -i '1i acl ocs_whitelist dstdomain """
        f"""{" ".join(constants.DISCON_CL_PROXY_ALLOWED_DOMAINS)}' """
        """/srv/squid/etc/squid.conf"""
    )
    logger.info(ssh_int_svc.exec_cmd(cmd=cmd))
    cmd = "sudo systemctl restart squid-proxy.service"
    logger.info(ssh_int_svc.exec_cmd(cmd=cmd))
