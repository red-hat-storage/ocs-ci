"""
Utility functions related to OCP deployment done via Flexy
"""

import json
import logging
import os

from ocs_ci.framework import config
from ocs_ci.ocs import constants
from ocs_ci.utility.connection import Connection

logger = logging.getLogger(__name__)


def load_cluster_info():
    """
    Parse cluster_info.json file generated by Flexy and load relevant
    configuratin.
    """
    cluster_info_file = os.path.join(
        config.ENV_DATA["cluster_path"], "cluster_info.json"
    )
    if os.path.exists(cluster_info_file):
        logging.info(f"File {cluster_info_file} exists, loading relevant info.")
        with open(cluster_info_file) as f:
            cluster_info = json.load(f)

        # is this a disconnected cluster?
        if (
            cluster_info.get("MIRROR_REGISTRY")
            and cluster_info.get("MIRROR_REGISTRY_LOGIN_USER")
            and cluster_info.get("MIRROR_REGISTRY_LOGIN_PASSWORD")
        ):
            logging.info("Loading configuration for disconnected cluster")
            config.DEPLOYMENT["disconnected"] = True
            config.DEPLOYMENT["mirror_registry"] = cluster_info.get("MIRROR_REGISTRY")
            config.DEPLOYMENT["mirror_registry_user"] = cluster_info.get(
                "MIRROR_REGISTRY_LOGIN_USER"
            )
            config.DEPLOYMENT["mirror_registry_password"] = cluster_info.get(
                "MIRROR_REGISTRY_LOGIN_PASSWORD"
            )
            config.DEPLOYMENT["int_svc_instance"] = cluster_info.get(
                "INT_SVC_INSTANCE_PUBLIC_IP"
            )


def configure_allowed_domains_in_proxy():
    """
    Configure squid proxy server - add domains which needs to be accessible
    from disconnected cluster for test execution.

    """
    # configure proxy on INT_SVC_INSTANCE - allow access to required sites
    private_key = os.path.expanduser(config.DEPLOYMENT["ssh_key_private"])
    ssh_int_svc = Connection(
        config.DEPLOYMENT.get("int_svc_instance"), "ec2-user", private_key
    )
    # as we are inserting the two lines before first line one by one,
    # we have to launch the sed commands in reverse order
    cmd = "sudo sed -i '1i http_access allow ocs_whitelist' /srv/squid/etc/squid.conf"
    logger.info(ssh_int_svc.exec_cmd(cmd=cmd))
    cmd = (
        """sudo sed -i '1i acl ocs_whitelist dstdomain """
        f"""{" ".join(constants.DISCON_CL_PROXY_ALLOWED_DOMAINS)}' """
        """/srv/squid/etc/squid.conf"""
    )
    logger.info(ssh_int_svc.exec_cmd(cmd=cmd))
    cmd = "sudo systemctl restart squid-proxy.service"
    logger.info(ssh_int_svc.exec_cmd(cmd=cmd))
