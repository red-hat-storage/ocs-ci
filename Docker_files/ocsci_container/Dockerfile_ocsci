FROM registry.redhat.io/ubi8/ubi

# Based on https://catalog.redhat.com/software/containers/ubi8/python-38/5dde9cacbed8bd164a0af24a

# Use this dockerfile to create ocs-ci infra and run test based on argument

# Configure k8s repository to install kubectl packages.
COPY k8s.repo /etc/yum.repos.d/k8s.repo

# Python package installation.
RUN INSTALL_PKGS="python38 python38-devel python38-setuptools python38-pip \
      libffi-devel libcurl-devel openssl-devel libxslt-devel libxml2-devel libtool-ltdl enchant glibc-langpack-en redhat-rpm-config \
      git gcc kubectl" && \
    yum -y module enable python38:3.8 && \
    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum -y clean all --enablerepo='*' && \
    rm -rf /var/cache/yum

# Environment variables containing various file locations required by install-ocs-ci.sh script
ENV OCSCI_INSTALL_DIR=/opt/ocs-ci

# Copy install-ocs-ci.sh script inside the container.
COPY scripts/install-ocs-ci.sh /usr/local/bin/
RUN chmod 755 /usr/local/bin/*.sh

# Copy edit_yaml.py script inside the container.
COPY scripts/edit_yaml.py /opt
RUN chmod 755 /opt/*.py

# Copy build_config.yaml inside the container.
COPY scripts/build_config.yaml /opt

# Get OCS-CI BRANCH argument
ARG BRANCH_ARG
ENV BRANCH=${BRANCH_ARG}

# Get PIP_VERSION argument
ARG PIP_VERSION_ARG
ENV PIP_VERSION=${PIP_VERSION_ARG}

# Install ocs-ci inside the container.
RUN install-ocs-ci.sh

# Install oc client
ADD https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz /
RUN cd /usr/local/bin && \
    tar -xvf /openshift-client-linux.tar.gz oc

# Copy run-ocs-ci.sh script to continer
COPY scripts/run-ocs-ci.sh /usr/local/bin/
RUN chmod 755 /usr/local/bin/*.sh

CMD [ "run-ci", "--help" ]

# Run run-ocs-ci.sh script that run when the container is initiated
ENTRYPOINT ["run-ocs-ci.sh"]
